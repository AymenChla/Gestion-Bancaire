/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MyFrames.MyPanels;

import GestionBancaire.ConnectionBD;
import MyFrames.FrameClient;
import static MyFrames.MyPanels.VisionnerClientPanel.fillTable;
import static MyFrames.MyPanels.VisionnerClientPanel.model;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author asus pro
 */
public class NouveauComptePanel extends javax.swing.JPanel {
    
    int id_client;
    /**
     * Creates new form NouveauComptePanel
     */
    public NouveauComptePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cin_field = new javax.swing.JTextField();
        decouvert_field = new javax.swing.JTextField();
        solde_field = new javax.swing.JTextField();
        btnCreer = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        typeCompte = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        taux_field = new javax.swing.JTextField();

        jLabel2.setText("Type Compte:");

        jLabel3.setText("CIN: ");

        cin_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cin_fieldActionPerformed(evt);
            }
        });

        decouvert_field.setEnabled(false);

        solde_field.setEnabled(false);

        btnCreer.setText("Créer");
        btnCreer.setEnabled(false);
        btnCreer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreerActionPerformed(evt);
            }
        });

        jButton2.setText("Rechercher");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        typeCompte.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choisir type", "Compte Courant", "Compte Epargne" }));
        typeCompte.setEnabled(false);
        typeCompte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCompteActionPerformed(evt);
            }
        });

        jLabel5.setText("Solde:");

        jLabel6.setText("Découvert Autorisé: ");

        jLabel7.setText("Taux intérêts:");

        taux_field.setEnabled(false);
        taux_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taux_fieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel1))
                                .addComponent(jLabel2))
                            .addGap(58, 58, 58))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel5))
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cin_field, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(taux_field, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                .addComponent(decouvert_field)
                                .addComponent(solde_field, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(typeCompte, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(btnCreer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cin_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton2))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(typeCompte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(solde_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(decouvert_field, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCreer)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(taux_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cin_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cin_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cin_fieldActionPerformed

    private void taux_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taux_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taux_fieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String cin = cin_field.getText();
        
         try {
            ConnectionBD conn = new ConnectionBD();
            String sql = "select * from clients where cin_client=?";
            PreparedStatement preparedstm = conn.initRequetePreparee(sql, true, cin);
            ResultSet rs = preparedstm.executeQuery();
            
            if (rs.next()) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "cin: " + rs.getString("cin_client") + "\nNom: " + rs.getString("nom_client") + "\nPrenom: " + rs.getString("prenom_client") ,"Warning",dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION){
                    
                    sql = "select count(*) as nbcompte from comptes where id_client = ?;";
                    preparedstm = conn.initRequetePreparee(sql, true, rs.getInt("id_client"));
                    ResultSet rsCount = preparedstm.executeQuery();
                    if(rsCount.next())
                    {
                        if(rsCount.getInt("nbcompte") < 2)
                        {
                            typeCompte.setEnabled(true);
                            solde_field.setEnabled(true);
                            id_client = rs.getInt("id_client");
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "vous ne pouvez plus creer de compte max atteint");
                        }
                    }
                    
                    
                    

                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "cin inexistant");
            }
            
            conn.disconnect();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void typeCompteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCompteActionPerformed
        String type = (String) typeCompte.getSelectedItem();
        if(type == "Choisir type")
        {
            decouvert_field.setEnabled(false); 
            taux_field.setEnabled(false);
            btnCreer.setEnabled(false);
        }
        if(type == "Compte Courant"){
            decouvert_field.setEnabled(true); 
            taux_field.setEnabled(false);
            btnCreer.setEnabled(true);
        }
          
        else if(type == "Compte Epargne")
        {
            decouvert_field.setEnabled(false); 
            taux_field.setEnabled(true);
            btnCreer.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_typeCompteActionPerformed

    private void btnCreerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreerActionPerformed
        
        
        double solde = Double.parseDouble(solde_field.getText());
        double val=0;
        String  requete = "insert into comptes(solde_compte,id_client) values(?,?)";;
        String sql="";
        if(typeCompte.getSelectedItem() == "choisir type")
        {
            JOptionPane.showMessageDialog(null, "Veuillez choisir le type du compte");

        }
        else{
            
            try {
                ConnectionBD conn = new ConnectionBD();
                
            if (typeCompte.getSelectedItem() == "Compte Courant") {
                //check if the client have already a compte courant
                sql = "select count(*) as nbcompte from comptes_courants where code_compte=(select code_compte from comptes where id_client=(select id_client from clients where cin_client=?));";
                ResultSet rs = conn.initRequetePreparee(sql, true, cin_field.getText()).executeQuery();
                if(rs.next() && rs.getInt("nbcompte") > 0)
                {
                     JOptionPane.showMessageDialog(null, "compte courant deja existant");
                    return;
                }
                    
                val = Double.parseDouble(decouvert_field.getText());
                 sql= "insert into comptes_courants(decouvert_autorise,code_compte)  values(?,?)";
                                    

            } else if (typeCompte.getSelectedItem() == "Compte Epargne") {
                //check if the client have already a compte epargne
                sql = "select count(*) as nbcompte from comptes_epargnes where code_compte=(select code_compte from comptes where id_client=(select id_client from clients where cin_client=?));";
                ResultSet rs = conn.initRequetePreparee(sql, true, cin_field.getText()).executeQuery();
                if(rs.next() && rs.getInt("nbcompte") > 0)
                {
                     JOptionPane.showMessageDialog(null, "compte epargne deja existant");
                    return;
                }
                val = Double.parseDouble(taux_field.getText());
                 sql= "insert into comptes_epargnes(taux_interet,code_compte)  values(?,?)";
            }

           
                PreparedStatement preparedStm = conn.initRequetePreparee(requete, true, solde,id_client);
                preparedStm.executeUpdate();

                //getting the last code_compte created
                requete = "SELECT LAST_INSERT_ID() as last_id;";
                ResultSet rs = conn.Select(requete);
                if(rs.next())
                {
                     
                    int code_compte = rs.getInt("last_id");
                    preparedStm = conn.initRequetePreparee(sql, true, val ,code_compte);
                    preparedStm.executeUpdate();
                   
                    JOptionPane.showMessageDialog(null, "Compte créer");
                    
                    typeCompte.setEnabled(false);
                    decouvert_field.setEnabled(false); 
                    taux_field.setEnabled(false);
                    solde_field.setEnabled(false);
                    btnCreer.setEnabled(false);
                    
                    //actualiser la table des clients
                    
                    VisionnerClientPanel.model.setRowCount(0);
                    requete = "select code_agence from agences where nom_agence=?";
                     rs = conn.initRequetePreparee(requete, true, FrameClient.visionnerClientPanel.getListe_agence().getSelectedItem().toString()).executeQuery();
                    if (rs.next()) {
                         sql = "select * from clients where code_agence=?;";
                        fillTable(sql, rs.getInt("code_agence"));

                }
                   

                        
                
                }
                
                

              conn.disconnect();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
         
    }//GEN-LAST:event_btnCreerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreer;
    private javax.swing.JTextField cin_field;
    private javax.swing.JTextField decouvert_field;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField solde_field;
    private javax.swing.JTextField taux_field;
    private javax.swing.JComboBox<String> typeCompte;
    // End of variables declaration//GEN-END:variables
}
